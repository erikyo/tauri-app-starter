version: '3'

services:
  db-supertokens:
    image: mysql:latest
    container_name: db-supertokens
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_DATABASE: ${SUPERTOKENS_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    ports:
      - "${SUPERTOKENS_MYSQL_PORT}:3306"
    expose:
      - "${SUPERTOKENS_MYSQL_PORT}"
    volumes:
      - supertokens_data:/var/lib/mysql-supertokens
      - ./db/supertokens-init.sql:/docker-entrypoint-initdb.d/supertokens-init.sql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-mysql:7.0
    depends_on:
      db-supertokens:
        condition: service_healthy
    ports:
      - "3567:3567"
    expose:
      - "3567"
    environment:
      MYSQL_CONNECTION_URI: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db-supertokens/supertokens
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 5s
      timeout: 5s
      retries: 10

  db-app:
    container_name: db-app
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_AUTH_PLUGIN: caching_sha2_password
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
    restart: always
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    expose:
      - "${MYSQL_PORT}"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    image: lts-bullseye-slim
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./api:/usr/src/api/
    env_file:
      - .env.test
    environment:
      ENV NODE_TLS_REJECT_UNAUTHORIZED: "0"
      NODE_ENV: docker
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      db-app:
        condition: service_healthy
      supertokens:
        condition: service_healthy

  app:
    image: lts-bullseye-slim
    working_dir: /usr/src/app
    env_file:
      - .env.test
    environment:
      ENV NODE_TLS_REJECT_UNAUTHORIZED: "0"
    volumes:
      - ./app:/usr/src/app
    command: >
      /bin/bash -c "
      npm install &&
      npm run build &&
      npm run dev
      "
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - api

volumes:
  mysql_data:
  supertokens_data:
